import { Injectable, signal } from '@angular/core';
import { CountryDataAPIService } from './country-data-api.service';
import {BehaviorSubject} from "rxjs";

export type CountryInfo = {
  name:string,
  code:string
}

export type CountryDetails = {
  name: string,
  language: string,
  currency: string,
  incomeLevel:string,
  capital: string,
  region: string,
  population: string
}

@Injectable({
  providedIn: 'root'
})

export class CountryAPIService {

  countries:string[] = [
    "afghanistan",
    "aland islands",
    "albania",
    "algeria",
    "american samoa",
    "andorra",
    "angola",
    "anguilla",
    "antigua and barbuda",
    "argentina",
    "armenia",
    "aruba",
    "australia",
    "austria",
    "azerbaijan",
    "bahamas",
    "bahrain",
    "baker island",
    "bangladesh",
    "barbados",
    "belarus",
    "belgium",
    "belize",
    "benin",
    "bermuda",
    "bhutan",
    "bolivia",
    "bonaire,  saint eustachius and saba",
    "bosnia and herzegovina",
    "botswana",
    "bouvet island",
    "brazil",
    "british indian ocean territory",
    "british virgin islands",
    "brunei darussalam",
    "bulgaria",
    "burkina faso",
    "burundi",
    "cambodia",
    "cameroon",
    "canada",
    "cape verde",
    "cayman islands",
    "central african republic",
    "chad",
    "chile",
    "china",
    "christmas island",
    "cocos  (keeling)  islands",
    "colombia",
    "comoros",
    "cook islands",
    "costa rica",
    "croatia",
    "cuba",
    "curaçao",
    "cyprus",
    "czech republic",
    "côte d'ivoire",
    "democratic republic of congo",
    "denmark",
    "djibouti",
    "dominica",
    "dominican republic",
    "ecuador",
    "egypt",
    "el salvador",
    "equatorial guinea",
    "eritrea",
    "estonia",
    "ethiopia",
    "falkland islands",
    "faroe islands",
    "federated states of micronesia",
    "fiji",
    "finland",
    "france",
    "french guiana",
    "french polynesia",
    "french southern and antarctic lands",
    "gabon",
    "gambia",
    "georgia",
    "germany",
    "ghana",
    "gibraltar",
    "glorioso islands",
    "greece",
    "greenland",
    "grenada",
    "guadeloupe",
    "guam",
    "guatemala",
    "guernsey",
    "guinea",
    "guinea-bissau",
    "guyana",
    "haiti",
    "heard island and mcdonald islands",
    "honduras",
    "hong kong",
    "howland island",
    "hungary",
    "iceland",
    "india",
    "indonesia",
    "iran",
    "iraq",
    "ireland",
    "isle of man",
    "israel",
    "italy",
    "jamaica",
    "japan",
    "jarvis island",
    "jersey",
    "johnston atoll",
    "jordan",
    "juan de nova island",
    "kazakhstan",
    "kenya",
    "kiribati",
    "kosovo",
    "kuwait",
    "kyrgyzstan",
    "lao people's democratic republic",
    "latvia",
    "lebanon",
    "lesotho",
    "liberia",
    "libya",
    "liechtenstein",
    "lithuania",
    "luxembourg",
    "macau",
    "macedonia",
    "madagascar",
    "malawi",
    "malaysia",
    "maldives",
    "mali",
    "malta",
    "marshall islands",
    "martinique",
    "mauritania",
    "mauritius",
    "mayotte",
    "mexico",
    "midway islands",
    "moldova",
    "monaco",
    "mongolia",
    "montenegro",
    "montserrat",
    "morocco",
    "mozambique",
    "myanmar",
    "namibia",
    "nauru",
    "nepal",
    "netherlands",
    "new caledonia",
    "new zealand",
    "nicaragua",
    "niger",
    "nigeria",
    "niue",
    "norfolk island",
    "north korea",
    "northern mariana islands",
    "norway",
    "oman",
    "pakistan",
    "palau",
    "palestinian territories",
    "panama",
    "papua new guinea",
    "paraguay",
    "peru",
    "philippines",
    "pitcairn islands",
    "poland",
    "portugal",
    "puerto rico",
    "qatar",
    "republic of congo",
    "reunion",
    "romania",
    "russia",
    "rwanda",
    "saint barthelemy",
    "saint helena",
    "saint kitts and nevis",
    "saint lucia",
    "saint martin",
    "saint pierre and miquelon",
    "saint vincent and the grenadines",
    "samoa",
    "san marino",
    "sao tome and principe",
    "saudi arabia",
    "senegal",
    "serbia",
    "seychelles",
    "sierra leone",
    "singapore",
    "slovakia",
    "slovenia",
    "solomon islands",
    "somalia",
    "south africa",
    "south georgia and south sandwich islands",
    "south korea",
    "south sudan",
    "spain",
    "sri lanka",
    "sudan",
    "suriname",
    "svalbard and jan mayen",
    "swaziland",
    "sweden",
    "switzerland",
    "syria",
    "taiwan",
    "tajikistan",
    "tanzania",
    "thailand",
    "timor-leste",
    "togo",
    "tokelau",
    "tonga",
    "trinidad and tobago",
    "tunisia",
    "turkey",
    "turkmenistan",
    "turks and caicos islands",
    "tuvalu",
    "uganda",
    "ukraine",
    "united arab emirates",
    "united kingdom",
    "united states",
    "uruguay",
    "us virgin islands",
    "uzbekistan",
    "vanuatu",
    "vatican city",
    "venezuela",
    "vietnam",
    "wake island",
    "wallis and futuna",
    "western sahara",
    "yemen",
    "zambia",
    "zimbabwe"]

  countryDataService;
  currencyNames = new Intl.DisplayNames(['en'],{type: 'currency'});
  languageNames = new Intl.DisplayNames(['en'],{type: 'language'});

  public selectedCountry = new BehaviorSubject<CountryInfo>({
    name:'',
    code:''
  });

  public countryDetails = new BehaviorSubject<CountryDetails>({
    name:'',
    language:'',
    currency:'',
    incomeLevel:'',
    capital:'',
    region: '',
    population: ''
  })


  constructor(cds:CountryDataAPIService) {
    this.countryDataService = cds;
  }

  // static getCountries(){
  //   return CountryAPIService.countries;
  // }

  // getCountryDetails():CountryDetails {
  //   return this.countryDetails();
  // }
  //
  // getSelectedCountry():CountryInfo {
  //   return this.selectedCountry();
  // }

  setSelectedCountry(name:string, code:string){
    //fetch api data
    this.selectedCountry.next({name,code})
    this.countryDataService.getCountryAPIData(code).subscribe(data => {
      this.countryDetails.next({
          name: data?.countryName,
            language:this.languageNames.of(data.languages?.split(',')[0])!,
            currency:(this.currencyNames.of(data?.currencyCode) as string),
            capital:data?.capital,
            population: Number(data?.population).toLocaleString(),
            incomeLevel:data.incomeLevel?.value,
            region: data.region?.value
        });
    });

  }

}
